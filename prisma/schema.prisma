generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id                     String  @id @default(cuid())
  name                   String?
  email                  String
  password               String?
  type                   String?
  dti                    String?
  bir                    String?
  barangayBusinessPermit String?
  identity               String?
  identityType           String?
  sec                    String?
  givenName              String?
  middleName             String?
  familyName             String?
  otpCode                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerCategorySlug String?
  sellerCategory     SellerCategory? @relation(fields: [sellerCategorySlug], references: [slug], onDelete: Cascade)

  sellerAddress SellerAddress[]
  sellerProduct SellerProduct[]
}

model SellerCategory {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller            Seller[]
  sellerSubCategory SellerSubCategory[]
}

model SellerSubCategory {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerCategory     SellerCategory @relation(fields: [sellerCategorySlug], references: [slug], onDelete: Cascade)
  sellerCategorySlug String
}

model SellerAddress {
  id                 String   @id @default(cuid())
  residentialAddress String?
  contactPerson      String?
  contactNumber      String?
  nationality        String?
  isReturnAddress    Boolean? @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model SellerProduct {
  id             String   @id @default(cuid())
  name           String
  description    String
  category       String
  images         String[]
  brand          String?
  materials      String[]
  weight         Float?
  height         Float?
  sku            String
  tags           String[]
  discount       Float?
  warrantyPeriod String?
  warrantyPolicy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  sellerProductVariants SellerProductVariants[]
}

model SellerProductVariants {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerProductId String
  sellerProduct   SellerProduct @relation(fields: [sellerProductId], references: [id], onDelete: Cascade)

  sellerProductVariantsOptions SellerProductVariantsOptions[]
}

model SellerProductVariantsOptions {
  id        String   @id @default(cuid())
  name      String
  price     Float
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerProductVariantsId String
  sellerProductVariants   SellerProductVariants @relation(fields: [sellerProductVariantsId], references: [id], onDelete: Cascade)
}

model Admin {
  id        String   @id @default(cuid())
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminSettings {
  id              String   @id @default(cuid())
  logo            String?
  brandName       String?
  commision       Float?
  description     String?
  dateEstablished String?
  contactNumber   String?
  address         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdminPolicies {
  id                   String   @id @default(cuid())
  terms                String?
  privacy              String?
  refund               String?
  intellectualProperty String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
